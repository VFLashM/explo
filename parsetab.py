
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '059B3A98A267B4366F5DD1322091D4C6'
    
_lr_action_items = {'LBRACE':([8,27,37,38,50,61,62,],[14,-8,47,-9,-10,70,-11,]),'RPAREN':([15,24,25,27,29,38,39,40,46,49,50,53,54,56,62,63,65,66,67,71,72,],[-25,37,38,-8,-20,-9,50,-12,-26,62,-10,-23,66,-25,-11,-13,72,-21,-27,-24,-22,]),'RBRACE':([21,22,27,28,29,31,32,33,34,38,44,45,50,52,55,57,58,59,60,62,66,68,69,72,73,74,],[33,-5,-8,-14,-20,-15,-7,-3,44,-9,-4,-6,-10,-16,-17,-28,-30,69,-31,-11,-21,-29,-18,-22,74,-19,]),'EQ':([10,11,12,26,27,30,38,50,62,],[17,19,20,41,-8,43,-9,-10,-11,]),'ENUM':([0,7,27,28,29,31,32,33,38,44,47,50,52,55,57,58,60,62,66,69,70,72,74,],[1,1,-8,-14,-20,-15,-7,-3,-9,-4,1,-10,-16,-17,1,-30,-31,-11,-21,-18,1,-22,-19,]),'ARROW':([37,],[48,]),'LET':([0,7,27,28,29,31,32,33,38,44,47,50,52,55,57,58,60,62,66,69,70,72,74,],[4,4,-8,-14,-20,-15,-7,-3,-9,-4,4,-10,-16,-17,4,-30,-31,-11,-21,-18,4,-22,-19,]),'LPAREN':([9,16,18,20,25,28,29,31,36,48,51,52,53,55,58,66,72,],[15,25,25,25,25,42,-20,42,25,25,25,42,42,42,42,-21,-22,]),'VAR':([0,7,27,28,29,31,32,33,38,44,47,50,52,55,57,58,60,62,66,69,70,72,74,],[5,5,-8,-14,-20,-15,-7,-3,-9,-4,5,-10,-16,-17,5,-30,-31,-11,-21,-18,5,-22,-19,]),'COLON':([10,11,23,],[16,18,36,]),'COMMA':([21,22,27,29,38,39,40,45,46,50,53,54,62,63,66,71,72,],[34,35,-8,-20,-9,49,51,-6,56,-10,64,65,-11,-13,-21,-24,-22,]),'TYPE':([0,7,27,28,29,31,32,33,38,44,47,50,52,55,57,58,60,62,66,69,70,72,74,],[6,6,-8,-14,-20,-15,-7,-3,-9,-4,6,-10,-16,-17,6,-30,-31,-11,-21,-18,6,-22,-19,]),'ID':([1,2,4,5,6,14,15,16,17,18,19,20,25,27,28,29,31,32,33,35,36,38,41,42,43,44,47,48,50,51,52,55,56,57,58,60,62,64,66,69,70,72,74,],[8,9,10,11,12,22,23,27,29,27,29,27,27,-8,-14,-20,-15,-7,-3,22,27,-9,29,29,29,-4,29,27,-10,27,-16,-17,23,29,-30,-31,-11,29,-21,-18,29,-22,-19,]),'FN':([0,7,27,28,29,31,32,33,38,44,47,50,52,55,57,58,60,62,66,69,70,72,74,],[2,2,-8,-14,-20,-15,-7,-3,-9,-4,2,-10,-16,-17,2,-30,-31,-11,-21,-18,2,-22,-19,]),'$end':([3,7,13,27,28,29,31,32,33,38,44,50,52,55,62,66,69,72,74,],[0,-1,-2,-8,-14,-20,-15,-7,-3,-9,-4,-10,-16,-17,-11,-21,-18,-22,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr':([17,19,41,42,43,47,57,64,70,],[28,31,52,53,55,58,58,53,58,]),'id_list':([14,35,],[21,45,]),'type_list':([25,51,],[39,63,]),'statement':([47,57,70,],[57,57,57,]),'expr_list':([42,64,],[54,71,]),'def_list':([0,7,],[3,13,]),'type':([16,18,20,25,36,48,51,],[26,30,32,40,46,61,40,]),'statement_list':([47,57,70,],[59,68,73,]),'def':([0,7,47,57,70,],[7,7,60,60,60,]),'arg_list':([15,56,],[24,67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> def_list","S'",1,None,None,None),
  ('def_list -> def','def_list',1,'p_def_list','parser.py',17),
  ('def_list -> def def_list','def_list',2,'p_def_list','parser.py',18),
  ('def -> ENUM ID LBRACE id_list RBRACE','def',5,'p_def_enum','parser.py',26),
  ('def -> ENUM ID LBRACE id_list COMMA RBRACE','def',6,'p_def_enum','parser.py',27),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',31),
  ('id_list -> ID COMMA id_list','id_list',3,'p_id_list','parser.py',32),
  ('def -> TYPE ID EQ type','def',4,'p_def_type_alias','parser.py',40),
  ('type -> ID','type',1,'p_type_simple','parser.py',44),
  ('type -> LPAREN RPAREN','type',2,'p_type_tuple','parser.py',48),
  ('type -> LPAREN type_list RPAREN','type',3,'p_type_tuple','parser.py',49),
  ('type -> LPAREN type_list COMMA RPAREN','type',4,'p_type_tuple','parser.py',50),
  ('type_list -> type','type_list',1,'p_type_list','parser.py',58),
  ('type_list -> type COMMA type_list','type_list',3,'p_type_list','parser.py',59),
  ('def -> LET ID EQ expr','def',4,'p_def_var','parser.py',67),
  ('def -> VAR ID EQ expr','def',4,'p_def_var','parser.py',68),
  ('def -> LET ID COLON type EQ expr','def',6,'p_def_var_typed','parser.py',74),
  ('def -> VAR ID COLON type EQ expr','def',6,'p_def_var_typed','parser.py',75),
  ('def -> FN ID LPAREN arg_list RPAREN LBRACE statement_list RBRACE','def',8,'p_def_fn','parser.py',82),
  ('def -> FN ID LPAREN arg_list RPAREN ARROW type LBRACE statement_list RBRACE','def',10,'p_def_fn','parser.py',83),
  ('expr -> ID','expr',1,'p_expr_simple','parser.py',90),
  ('expr -> expr LPAREN expr_list RPAREN','expr',4,'p_expr_call','parser.py',94),
  ('expr -> expr LPAREN expr_list COMMA RPAREN','expr',5,'p_expr_call','parser.py',95),
  ('expr_list -> expr','expr_list',1,'p_expr_list','parser.py',99),
  ('expr_list -> expr COMMA expr_list','expr_list',3,'p_expr_list','parser.py',100),
  ('arg_list -> <empty>','arg_list',0,'p_arg_list','parser.py',108),
  ('arg_list -> ID COLON type','arg_list',3,'p_arg_list','parser.py',109),
  ('arg_list -> ID COLON type COMMA arg_list','arg_list',5,'p_arg_list','parser.py',110),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',119),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',120),
  ('statement -> expr','statement',1,'p_statement','parser.py',126),
  ('statement -> def','statement',1,'p_statement','parser.py',127),
]

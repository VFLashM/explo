fn assert(c: Bool) { if not(c) { abort() } }

fn truefn() -> Bool { true }

fn first(a: Int, b: Int) -> Int {
   a
}
fn second(a: Int, b: Int) -> Int {
   first(b, a)
}
fn assign(a: Bool) -> Bool {
   var b: Bool = true
   b = a
   b
}

fn mismatch1() -> Int { true } //<error type mismatch
fn mismatch2() -> Bool {} //<error type mismatch
fn mismatch3() -> Bool { var a: Bool a = true } //<error type mismatch
fn mismatch4() { first(true, 1) } //<error type mismatch
fn undefined() { unknown(true) } //<error undefined

fn main() {
   assert(truefn())
   assert(ieq(1, first(1, 2)))
   assert(ieq(2, second(1, 2)))
   assert(assign(true))
   assert(not(assign(false)))
}
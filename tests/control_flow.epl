fn assert(c: Bool) { if not(c) { abort() } }

fn test_if() {
   if ieq(1, 2) {
      print(0)
   }
   if true {
      print(0)
   }
   if true {}

   var i: Int = if true { 1 } else { 0 }
   
   if 1 {} //<error type mismatch
   if print(1) {} //<error type mismatch
   var i2: Int = if true { 1 } //<error type mismatch
   var i3: Int = if true { 1 } else { true } //<error type mismatch
}

fn test_if_else() {
   if ieq(1, 2) {
     print(1)
   } else {
     print(0)
   }
}

fn test_while() {
   while true {
     print(1)
   }
   while ieq(1, 2) {
     print(2)
   }
   while true {}

   while 1 {} //<error type mismatch
   while print(1) {} //<error type mismatch
}

fn main() {
   if true {
      abort() //<runtime abort
   } else {
      abort()
   }
   if false {
      abort()
   } else {
      abort() //<runtime abort
   }
   if true {
      abort() //<runtime abort
   }
   if false {
      abort()
   }

   var i1 = if true { 1 } else { 2 }
   var i2 = if false { 1 } else { 2 }
   assert(ieq(i1, 1))
   assert(ieq(i2, 2))

   while false {
     abort()
   }

   var cnt = 10
   var inc = 0
   while ineq(cnt, 0) {
     inc = add(inc, 2)
     cnt = sub(cnt, 1)
   }
   assert(ieq(inc, 20))
}